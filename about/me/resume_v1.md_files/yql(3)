/**/HTMLPreview.loadJS({"query":{"count":1,"created":"2016-01-18T04:11:42Z","lang":"zh-CN","diagnostics":{"url":[{"execution-start-time":"1","execution-stop-time":"318","execution-time":"317","content":"http://www.datatables.org/data/data.headers.xml"},{"execution-start-time":"324","execution-stop-time":"594","execution-time":"270","content":"https://raw.githubusercontent.com/ArtinHuang/artinhuang_re/master/about/me/resume_v1.md_files/app.js"}],"publiclyCallable":"true","log":"response length: 4748","javascript":{"execution-start-time":"320","execution-stop-time":"595","execution-time":"274","instructions-used":"23902","table-name":"data.headers"},"user-time":"596","service-time":"587","build-version":"0.2.376"},"results":{"resources":{"url":"https://raw.githubusercontent.com/ArtinHuang/artinhuang_re/master/about/me/resume_v1.md_files/app.js","status":"200","headers":{"result":{"content-security-policy":"default-src 'none'","x-xss-protection":"1; mode=block","x-frame-options":"deny","x-content-type-options":"nosniff","strict-transport-security":"max-age=31536000","etag":"\"48e5f09c8ceb4f3df7106b8e771f13be6d5a8a6f\"","content-type":"text/plain; charset=utf-8","cache-control":"max-age=300","x-github-request-id":"2BF94B18:10E9:381E280:569C65FD","content-encoding":"gzip","content-length":"1539","accept-ranges":"bytes","date":"Mon, 18 Jan 2016 04:11:42 GMT","via":"1.1 varnish","connection":"keep-alive","x-served-by":"cache-sin6920-SIN","x-cache":"MISS","x-cache-hits":"0","vary":"Authorization,Accept-Encoding","access-control-allow-origin":"*","x-fastly-request-id":"81039beb9ce4c3a6a3d1d8f6478651ae6fbc746d","expires":"Mon, 18 Jan 2016 04:16:42 GMT","source-age":"0"}},"content":"/* jshint -W030 */\n\nwindow.App = {}\nwindow.App.Context = {}\nwindow.App.Options = {}\n\n$(function() {\n  \"use strict\"\n\n  // From http://www.softcomplex.com/docs/get_window_size_and_scrollbar_position.html\n  var filterResult = function(win, docel, body) {\n    var result = win ? win : 0\n    if (docel && (!result || (result > docel))) {\n      result = docel\n    }\n    return body && (!result || (result > body)) ? body : result\n  }\n\n  var sliderHeight = function() {\n    return filterResult(\n      window.innerHeight ? window.innerHeight : 0,\n      document.documentElement ? document.documentElement.clientHeight : 0,\n      document.body ? document.body.clientHeight : 0)\n  }\n\n  var sliderPos = function() {\n    return filterResult(\n      window.pageYOffset ? window.pageYOffset : 0,\n      document.documentElement ? document.documentElement.scrollTop : 0,\n      document.body ? document.body.scrollTop : 0)\n  }\n\n  var getVerticalScrollProperties = function() {\n    var height = $('html, body').height()\n    return {\n      'height': height,\n      'sliderHeight': sliderHeight(),\n      'sliderPos': sliderPos()\n    }\n  }\n\n  var autoScroll = function(oldScrollProps) {\n    var newScrollProps = getVerticalScrollProperties()\n    var increment = newScrollProps.height - oldScrollProps.height\n    $('html, body').animate({\n      scrollTop: oldScrollProps.sliderPos + increment\n    }, 'fast')\n  }\n\n  // Run the scipts of type=text/x-omnimarkup-config\n  !function() {\n    /* jshint -W061 */\n    var scripts = $('script')\n    scripts.each(function() {\n      var type = String(this.type).replace(/ /g, '')\n      if (type.match(/^text\\/x-omnimarkup-config(;.*)?$/) && !type.match(/;executed=true/)) {\n        this.type += ';executed=true'\n        eval(this.innerHTML)\n      }\n    })\n    /* jshint +W061 */\n  }()\n\n  var pollingInterval = window.App.Options.ajax_polling_interval\n  var mathJaxEnabled = window.App.Options.mathjax_enabled\n  var disconnected = false\n\n  var reviveBuffer = function() {\n    var request = {\n      revivable_key: window.App.Context.revivable_key\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: '/api/revive',\n      data: JSON.stringify(request),\n      dataType: 'json',\n      contentType: 'application/json; charset=utf-8'\n    }).done(function(data) {\n      if (!data) {\n        return\n      }\n\n      if (data.status === 'OK') {\n        disconnected = false\n        window.location.replace('/view/' + data.buffer_id.toString())\n      }\n    }).always(function() {\n      if (disconnected) {\n        setTimeout(reviveBuffer, Math.max(pollingInterval, 600))\n      }\n    })\n  }\n\n  var poll = function() {\n    var content$ = $('#content')\n    var request = {\n      buffer_id: window.App.Context.buffer_id,\n      timestamp: window.App.Context.timestamp\n    }\n\n    setTimeout(function() {\n      $.ajax({\n        type: 'POST',\n        url: '/api/query',\n        data: JSON.stringify(request),\n        dataType: 'json',\n        contentType: 'application/json; charset=utf-8'\n      }).done(function(data) {\n        // Status <- Online\n        if (!data) {\n          return\n        }\n\n        switch (data.status) {\n        case 'UNCHANGED':\n          break\n        case 'DISCONNECTED':\n          disconnected = true\n          break\n        case 'OK':\n          var oldScrollProps = getVerticalScrollProperties()\n          // Fill the filename\n          document.title = data.filename + '\\u2014' + data.dirname\n          $('#filename').text(data.filename)\n          // Replace content with latest one\n          content$.empty().html(data.html_part)\n          window.App.Context.timestamp = data.timestamp\n          window.App.Context.revivable_key = data.revivable_key\n\n          // dirty hack for auto scrolling if images exist\n          var img$ = $('img')\n          var doAutoScroll\n          if (img$.length) {\n            doAutoScroll = function() {\n              img$.imagesLoaded()\n                .always(function() {\n                  autoScroll(oldScrollProps)\n                })\n            }\n          } else {\n            doAutoScroll = function() {\n              autoScroll(oldScrollProps)\n            }\n          }\n\n          // typeset for MathJax\n          if (mathJaxEnabled) {\n            MathJax.Hub.Queue(\n              ['resetEquationNumbers', MathJax.InputJax.TeX], ['Typeset', MathJax.Hub, content$[0]],\n              doAutoScroll)\n          } else {\n            doAutoScroll()\n          }\n          break\n        }\n      }).fail(function() {\n        // Status <- Offline\n        // console.log('Offline')\n      }).always(function() {\n        if (!disconnected) {\n          poll()\n        } else {\n          reviveBuffer()\n        }\n      })\n    }, pollingInterval)\n  }\n\n  // Start polling once page started\n  poll()\n})"}}}});